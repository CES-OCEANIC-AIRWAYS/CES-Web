@page "/package-information"
@inject NavigationManager NavigationManager

<div class="page-container">
    <div class="navbar">
        <a href="/">
            <img src="logo.png" alt="Logo" class="logo">
        </a>
        <ul class="nav-menu">
            <li class="nav-item">
                <img src="send-package.svg" alt="Send Package Icon" class="nav-icon">
                <a href="/package-information">Send Package</a>
            </li>
            <AuthorizeView>
                <NotAuthorized>
                    <li class="nav-item">
                        <img src="login.png" alt="Login Icon" class="nav-icon">
                        <a href="/login">Login</a>
                    </li>
                </NotAuthorized>
                <Authorized>
                    <span>@context.User.Identity?.Name</span>
                </Authorized>
            </AuthorizeView>
        </ul>
    </div>
    <div class="package-container">
        <h1 class="package-title">Package Information</h1>
        <p clas="package-description">The shipping price is determined by weight, size and route.</p>
		<form method="post" action="api/routes/find-routes" @onsubmit="SubmitForm">

            <div class="package-section">
                <p class="package-section-title">How heavy is the package?</p>
                <label for="Weight" class="sub-label">Choose weight</label>
				<input type="text" id="Weight" class="input" @bind="formData.Weight" />

            </div>

            <div class="package-section">
                <p class="package-section-title">What is the size of the package?</p>
                <label for="Size" class="sub-label">Choose size</label>
				<input type="text" id="ize" class="input" @bind="formData.Size" />

                <label for="Length" class="sub-label">Choose length</label>
				<input type="text" id="Length" class="input" @bind="formData.Length" />

			<label for="Width" class="sub-label">Choose width</label>
			<input type="text" id="Width" class="input" @bind="formData.Width"/>
            </div>
            <div class="package-section">
                <p class="package-section-title">Choose destination</p>
			<label for="SourceId" class="sub-label">From</label>

				<select id="SourceId" name="SourceId" class="dropdown" @bind="formData.SourceId">
					@foreach (var location in locations)
					{
						<option value="@location.LocationId.Value">@location.Name</option>

					}
                </select>
				
			<label for="DestinationId" class="sub-label">To</label>

				<select id="DestinationId" name="DestinationId" class="dropdown" @bind="formData.DestinationId">
					@foreach (var location in locations)
					{

						<option value="@location.LocationId.Value">@location.Name</option>
					}
				</select>
				
            </div>
		<button type="submit" class="next-button"><a href="/sender-and-receiver">Next</a></button>

            <a href="/" class="cancel-link">Cancel</a>
		</form>

    </div>
    <footer class="footer">
        <ul class="footer-list">
            <li class="footer-item">
                <img src="book-flight.png" alt="Book Flights Icon" class="footer-icon">
                <div class="footer-content">
                    <div class="footer-title">Book Flights</div>
                </div>
            </li>
            <li class="footer-item">
                <img src="email.png" alt="Email Icon" class="footer-icon">
                <div class="footer-content">
                    <div class="footer-title">Email</div>
                    <div class="footer-description">oceanic@airlines.com</div>
                </div>
            </li>
            <li class="footer-item">
                <img src="phone.png" alt="Phone Icon" class="footer-icon">
                <div class="footer-content">
                    <div class="footer-title">Phone</div>
                    <div class="footer-description">1-888-548-0034</div>
                </div>
            </li>
        </ul>
    </footer>
</div>

@code {
	private FormData formData = new FormData();

	private void UpdateSourceId(Guid locationId)
	{
		formData.SourceId = locationId.ToString();
	}

	private void UpdateDestinationId(Guid destinationId)
	{
		formData.DestinationId = destinationId.ToString();
	}


	private async Task SubmitForm()
    {
        string json = JsonSerializer.Serialize(formData);
		var request = new HttpRequestMessage(HttpMethod.Post, "api/routes/find-routes");
		request.Content = new StringContent(json, Encoding.UTF8, "application/json");
		var httpClient = new HttpClient();
		httpClient.BaseAddress = new Uri("https://localhost:7004/");
		var response = await httpClient.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseContent);
        }
    }


	private class FormData
	{
		public int Weight { get; set; }
		public int Size { get; set; }
		public int Length { get; set; }
		public int Width { get; set; }
		#pragma warning disable CS8618
		public string SourceId { get; set; }
		public string DestinationId { get; set; }
	}

}
     




